// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MAN
  WOMAN
}

enum Role {
  USER
  ADMIN 
}

enum Status {
  INCART
  UNPAID
  PAID
  AWAITING_CONFIRMATION
  PACKING
  AWAITING_COURIER
  DELIVERING
  REACHED_DESTINATION
  FINISHED
  RETURNING
  NEED_ADMIN_REVIEW
  RETURNED
  RETURN_REJECTED
  CANCELING
  CANCELED
  CANCEL_REJECTED
}

enum ComplainStatus {
  OPEN
  CLOSED
}

enum TransactionStatus {
  UNPAID
  PAID
  REFUNDED
}

enum WithdrawalStatus {
  REQUESTED
  ON_PROCESS
  DONE
}

model Account {
  id                 String     @id @default(cuid())
  userId             String     @map("user_id")
  type               String
  provider           String
  providerAccountId  String     @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      String    @unique @map("user_id")
  username    String
  password    String
  phoneNumber String?
  birthDate   String?
  gender      Gender?
  addresses   Address[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id            Int    @id @default(autoincrement())
  userId        String @unique @map("user_id")
  shopName      String
  balance       Int    @default(0)
  product       Product[]
  image         String?
  averageRating Float @default(5.00)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id            Int     @id @default(autoincrement())
  profileId     Int     @map("profile_id")
  address       String  
  region        String
  city          String
  province      String
  postcode      String
  contact       String
  isMainAddress Boolean @default(false)
  isShopAddress Boolean @default(false)

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  Role          Role         @default(USER)
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  balance       Int         @default(0)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?  
  shop          Shop?
  cart          Cart?
  bankAccount   BankAccount?
  withdrawal    Withdrawal[]
}

model Product {
  id            Int @unique @id @default(autoincrement())
  shopId        Int @map("shop_id")
  categoryId    Int @map("category_id")
  name          String
  image         String?
  description   String?
  price         Int
  stock         Int
  productInCart ProductInCart[]
  averageRating Float @default(5.00)

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int @id @default(autoincrement())
  category      String
  product       Product[]
}

model Cart {
  id            Int @unique @id @default(autoincrement())
  userId        String @unique @map("user_id")
  productInCart ProductInCart[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductInCart {
  id           Int @id @default(autoincrement())
  cartId       Int @map("cart_id")
  productId    Int @map("product_id")
  count        Int
  status       Status @default(INCART)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  Rating       Rating?
  Complain     Complain?
  Transaction  Transaction?

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Rating {
  id              Int @id @default(autoincrement())
  productInCartId Int @map("productInCart_id") @unique
  rate            Int
  comment         String?
  image           String?
  
  productInCart ProductInCart @relation(fields: [productInCartId], references: [id], onDelete: Cascade)
}

model Event {
  id              Int @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  image           String
  eventPath       String
  eventName       String
}

model Complain {
  id                Int @id @default(autoincrement())
  productInCartId   Int @map("productInCart_id") @unique
  image             String
  description       String
  status            ComplainStatus @default(OPEN)
  ShopComment       ShopComment?

  productInCart ProductInCart @relation(fields: [productInCartId], references: [id], onDelete: Cascade)
}

model ShopComment {
  id                Int @id @default(autoincrement())
  complainId        Int @map("Complain_id") @unique
  image             String
  description       String
  
  complain Complain @relation(fields: [complainId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String @id @default(cuid())
  productInCartId   Int @map("productInCart_id") @unique
  status            TransactionStatus @default(UNPAID)

  productInCart ProductInCart @relation(fields: [productInCartId], references: [id], onDelete: Cascade)
}

model BankType {
  id          Int      @id @default(autoincrement())
  name        String
  account     BankAccount[]
}

model BankAccount {
  id          Int      @id @default(autoincrement())
  bankTypeId  Int      @map("bankType_id")
  userId      String   @unique @map("user_id")
  name        String
  number      String   @unique

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bank        BankType     @relation(fields: [bankTypeId], references: [id], onDelete: Cascade)
}

model Withdrawal {
  id          Int               @id @default(autoincrement())
  userId      String            @unique @map("user_id")
  amount      Int
  status      WithdrawalStatus  @default(REQUESTED)

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
