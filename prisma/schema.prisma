// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String     @id @default(cuid())
  userId             String     @map("user_id")
  type               String
  provider           String
  providerAccountId  String     @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      String    @unique @map("user_id")
  username    String
  password    String
  phoneNumber String?
  addresses   Address[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id       Int    @id @default(autoincrement())
  userId   String @unique @map("user_id")
  shopName String
  product  Product[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id            Int     @id @default(autoincrement())
  profileId     Int     @map("profile_id")
  address       String  
  region        String
  city          String
  province      String
  postcode      String
  contact       String
  isMainAddress Boolean @default(false)
  isShopAddress Boolean @default(false)

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?  
  shop          Shop?
}

model Product {
  id            Int @id @default(autoincrement())
  shopId        Int @map("shop_id")
  name          String
  image         String?
  price         Int
  stock         Int

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
